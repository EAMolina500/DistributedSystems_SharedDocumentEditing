# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import document_pb2 as document__pb2


class DocumentServiceStub(object):
    """client services
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InsertCommand = channel.unary_unary(
                '/DocumentService/InsertCommand',
                request_serializer=document__pb2.Insert.SerializeToString,
                response_deserializer=document__pb2.Response.FromString,
                )
        self.DeleteCommand = channel.unary_unary(
                '/DocumentService/DeleteCommand',
                request_serializer=document__pb2.Delete.SerializeToString,
                response_deserializer=document__pb2.Response.FromString,
                )
        self.DisplayCommand = channel.unary_unary(
                '/DocumentService/DisplayCommand',
                request_serializer=document__pb2.Display.SerializeToString,
                response_deserializer=document__pb2.Response.FromString,
                )
        self.SendInsert = channel.unary_unary(
                '/DocumentService/SendInsert',
                request_serializer=document__pb2.InsertParams.SerializeToString,
                response_deserializer=document__pb2.Response.FromString,
                )
        self.SendDelete = channel.unary_unary(
                '/DocumentService/SendDelete',
                request_serializer=document__pb2.DeleteParams.SerializeToString,
                response_deserializer=document__pb2.Response.FromString,
                )
        self.SendPendingMessages = channel.unary_unary(
                '/DocumentService/SendPendingMessages',
                request_serializer=document__pb2.Request.SerializeToString,
                response_deserializer=document__pb2.ParamsList.FromString,
                )


class DocumentServiceServicer(object):
    """client services
    """

    def InsertCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisplayCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendInsert(self, request, context):
        """server services

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPendingMessages(self, request, context):
        """

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DocumentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InsertCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertCommand,
                    request_deserializer=document__pb2.Insert.FromString,
                    response_serializer=document__pb2.Response.SerializeToString,
            ),
            'DeleteCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCommand,
                    request_deserializer=document__pb2.Delete.FromString,
                    response_serializer=document__pb2.Response.SerializeToString,
            ),
            'DisplayCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.DisplayCommand,
                    request_deserializer=document__pb2.Display.FromString,
                    response_serializer=document__pb2.Response.SerializeToString,
            ),
            'SendInsert': grpc.unary_unary_rpc_method_handler(
                    servicer.SendInsert,
                    request_deserializer=document__pb2.InsertParams.FromString,
                    response_serializer=document__pb2.Response.SerializeToString,
            ),
            'SendDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.SendDelete,
                    request_deserializer=document__pb2.DeleteParams.FromString,
                    response_serializer=document__pb2.Response.SerializeToString,
            ),
            'SendPendingMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPendingMessages,
                    request_deserializer=document__pb2.Request.FromString,
                    response_serializer=document__pb2.ParamsList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DocumentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DocumentService(object):
    """client services
    """

    @staticmethod
    def InsertCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/InsertCommand',
            document__pb2.Insert.SerializeToString,
            document__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/DeleteCommand',
            document__pb2.Delete.SerializeToString,
            document__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisplayCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/DisplayCommand',
            document__pb2.Display.SerializeToString,
            document__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendInsert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/SendInsert',
            document__pb2.InsertParams.SerializeToString,
            document__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/SendDelete',
            document__pb2.DeleteParams.SerializeToString,
            document__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPendingMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/SendPendingMessages',
            document__pb2.Request.SerializeToString,
            document__pb2.ParamsList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
