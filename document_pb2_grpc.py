# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import document_pb2 as document__pb2


class DocumentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCommand = channel.unary_unary(
                '/DocumentService/CreateCommand',
                request_serializer=document__pb2.Create.SerializeToString,
                response_deserializer=document__pb2.Response.FromString,
                )
        self.InsertCommand = channel.unary_unary(
                '/DocumentService/InsertCommand',
                request_serializer=document__pb2.Insert.SerializeToString,
                response_deserializer=document__pb2.Response.FromString,
                )
        self.DeleteCommand = channel.unary_unary(
                '/DocumentService/DeleteCommand',
                request_serializer=document__pb2.Delete.SerializeToString,
                response_deserializer=document__pb2.Response.FromString,
                )
        self.DisplayCommand = channel.unary_unary(
                '/DocumentService/DisplayCommand',
                request_serializer=document__pb2.Display.SerializeToString,
                response_deserializer=document__pb2.Response.FromString,
                )


class DocumentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisplayCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DocumentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCommand,
                    request_deserializer=document__pb2.Create.FromString,
                    response_serializer=document__pb2.Response.SerializeToString,
            ),
            'InsertCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertCommand,
                    request_deserializer=document__pb2.Insert.FromString,
                    response_serializer=document__pb2.Response.SerializeToString,
            ),
            'DeleteCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCommand,
                    request_deserializer=document__pb2.Delete.FromString,
                    response_serializer=document__pb2.Response.SerializeToString,
            ),
            'DisplayCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.DisplayCommand,
                    request_deserializer=document__pb2.Display.FromString,
                    response_serializer=document__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DocumentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DocumentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/CreateCommand',
            document__pb2.Create.SerializeToString,
            document__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/InsertCommand',
            document__pb2.Insert.SerializeToString,
            document__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/DeleteCommand',
            document__pb2.Delete.SerializeToString,
            document__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisplayCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/DisplayCommand',
            document__pb2.Display.SerializeToString,
            document__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ServerCommunicationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMessageToServers = channel.unary_unary(
                '/ServerCommunicationService/SendMessageToServers',
                request_serializer=document__pb2.Operation.SerializeToString,
                response_deserializer=document__pb2.Response.FromString,
                )


class ServerCommunicationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendMessageToServers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerCommunicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMessageToServers': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessageToServers,
                    request_deserializer=document__pb2.Operation.FromString,
                    response_serializer=document__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ServerCommunicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerCommunicationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendMessageToServers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerCommunicationService/SendMessageToServers',
            document__pb2.Operation.SerializeToString,
            document__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
